require('dotenv').config();

const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');
const { OpenAI } = require('openai'); // OpenAIライブラリ

const app = express();
const PORT = process.env.PORT || 3000;

// Supabaseクライアントを初期化
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// OpenAIクライアントを初期化
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

app.use(cors());
app.use(express.json());

// デフォルトページを register.html に設定
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'register.html'));
});

// 静的ファイルの配信設定
app.use(express.static(__dirname));
app.use('/word', express.static(path.join(__dirname, 'word')));
// app.use(express.static(path.join(__dirname, '..'))); // Renderでは不要

// --- ユーザー認証API ---
app.post('/api/register', async (req, res) => {
    const { email, password, username } = req.body;
    const { data, error } = await supabase.auth.signUp({ email, password });
    if (error) return res.status(400).json({ error: error.message });
    if (data.user) {
        const { error: insertError } = await supabase.from('users').insert([{ id: data.user.id, username: username }]);
        if (insertError) return res.status(500).json({ error: 'ユーザー情報の保存に失敗しました。' });
    }
    res.status(200).json(data);
});

app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) return res.status(400).json({ error: error.message });
    res.status(200).json(data);
});

// --- 認証済みユーザー情報を取得するヘルパー関数 ---
async function getUser(req) {
    const authHeader = req.headers.authorization;
    if (!authHeader) return { user: null, error: 'Authorization header is missing' };
    
    const token = authHeader.split(' ')[1];
    if (!token) return { user: null, error: 'Token is missing' };

    const { data: { user }, error } = await supabase.auth.getUser(token);
    return { user, error };
}

// --- 成績データ用API ---
app.get('/api/scores', async (req, res) => {
    const { user, error } = await getUser(req);
    if (error || !user) return res.status(401).json({ error: '認証に失敗しました。' });

    const { data, error: dbError } = await supabase.from('scores').select('*').eq('user_id', user.id);
    if (dbError) return res.status(500).json({ error: '成績の取得に失敗しました。' });
    res.status(200).json(data);
});

app.post('/api/scores', async (req, res) => {
    const { user, error } = await getUser(req);
    if (error || !user) return res.status(401).json({ error: '認証に失敗しました。' });

    const { chapter, tangen, type, correct, total } = req.body;

    const { data: existingScore, error: selectError } = await supabase
        .from('scores')
        .select('*')
        .eq('user_id', user.id)
        .eq('chapter', chapter)
        .eq('tangen', tangen)
        .eq('type', type)
        .single();

    if (selectError && selectError.code !== 'PGRST116') {
        return res.status(500).json({ error: '成績の確認に失敗しました。' });
    }

    if (existingScore) {
        const newCorrect = existingScore.correct + correct;
        const newTotal = existingScore.total + total;
        const { error: updateError } = await supabase
            .from('scores')
            .update({ correct: newCorrect, total: newTotal })
            .eq('id', existingScore.id);
        
        if (updateError) return res.status(500).json({ error: '成績の更新に失敗しました。' });
    } else {
        const { error: insertError } = await supabase
            .from('scores')
            .insert([{ user_id: user.id, chapter, tangen, type, correct, total }]);
        
        if (insertError) return res.status(500).json({ error: '成績の保存に失敗しました。' });
    }
    
    res.status(200).send();
});

// --- 保存済み問題データ用API ---
app.get('/api/saved-questions', async (req, res) => {
    const { user, error } = await getUser(req);
    if (error || !user) return res.status(401).json({ error: '認証に失敗しました。' });

    const { data, error: dbError } = await supabase.from('saved_questions').select('*').eq('user_id', user.id);
    if (dbError) return res.status(500).json({ error: '保存済み問題の取得に失敗しました。' });
    res.status(200).json(data);
});

app.post('/api/saved-questions', async (req, res) => {
    const { user, error } = await getUser(req);
    if (error || !user) return res.status(401).json({ error: '認証に失敗しました。' });

    const { question, correct_answer, distractors, explanation, chapter, tangen, type, wasCorrect } = req.body;
    const { error: dbError } = await supabase.from('saved_questions').insert([
        { user_id: user.id, question, correct_answer, distractors, explanation, chapter, tangen, type, wasCorrect }
    ]);
    if (dbError) {
        console.error('Supabase insert error:', dbError);
        return res.status(500).json({ error: '問題の保存に失敗しました。' });
    }
    res.status(200).send();
});

app.delete('/api/saved-questions', async (req, res) => {
    const { user, error } = await getUser(req);
    if (error || !user) return res.status(401).json({ error: '認証に失敗しました。' });
    
    const { id } = req.body;
    let query = supabase.from('saved_questions').delete().eq('user_id', user.id);
    if (id) {
        query = query.eq('id', id);
    }

    const { error: dbError } = await query;
    if (dbError) return res.status(500).json({ error: '問題の削除に失敗しました。' });
    res.status(200).send();
});

// --- アンケート送信API (古い/汎用) ---
app.post('/api/submit-survey', async (req, res) => {
    const { role, usage, satisfaction, comments } = req.body;
    const { error } = await supabase.from('surveys').insert([{ role, usage, satisfaction, comments }]);
    if (error) {
        console.error('Survey submission error:', error);
        return res.status(500).json({ error: 'アンケートの送信に失敗しました。' });
    }
    res.status(200).json({ message: 'アンケートが正常に送信されました。' });
});

// --- 事前アンケート送信API ---
app.post('/api/submit-pre-survey', async (req, res) => {
    const { user, error: userError } = await getUser(req);
    if (userError || !user) return res.status(401).json({ error: '認証に失敗しました。' });

    const {
        q1_realization, q2_familiarity, q3_fun, q4_understanding, q5_programming_fun,
        q6_purpose, q7_curiosity, q8_utility, q9_effort, q10_self_study, q11_goals,
        q12_communication, q13_reaction, q14_relevance, q15_attendance, q16_participation,
        q17_importance, q18_knowledge, q19_desire_to_improve
    } = req.body;

    const surveyData = {
        user_id: user.id,
        q1_realization: parseInt(q1_realization) || null,
        q2_familiarity: parseInt(q2_familiarity) || null,
        q3_fun: parseInt(q3_fun) || null,
        q4_understanding: parseInt(q4_understanding) || null,
        q5_programming_fun: parseInt(q5_programming_fun) || null,
        q6_purpose: parseInt(q6_purpose) || null,
        q7_curiosity: parseInt(q7_curiosity) || null,
        q8_utility: parseInt(q8_utility) || null,
        q9_effort: parseInt(q9_effort) || null,
        q10_self_study: parseInt(q10_self_study) || null,
        q11_goals: parseInt(q11_goals) || null,
        q12_communication: parseInt(q12_communication) || null,
        q13_reaction: parseInt(q13_reaction) || null,
        q14_relevance: parseInt(q14_relevance) || null,
        q15_attendance: parseInt(q15_attendance) || null,
        q16_participation: parseInt(q16_participation) || null,
        q17_importance: parseInt(q17_importance) || null,
        q18_knowledge: parseInt(q18_knowledge) || null,
        q19_desire_to_improve: parseInt(q19_desire_to_improve) || null
    };

    const { error: dbError } = await supabase.from('pre_survey_responses').insert([surveyData]);

    if (dbError) {
        console.error('Pre-survey submission error:', dbError);
        return res.status(500).json({ error: '事前アンケートの送信に失敗しました。' });
    }
    res.status(200).json({ message: '事前アンケートが正常に送信されました。' });
});

// --- 事後アンケート送信API ---
app.post('/api/submit-post-survey', async (req, res) => {
    const { user, error: userError } = await getUser(req);
    if (userError || !user) return res.status(401).json({ error: '認証に失敗しました。' });

    const {
        q1_realization, q2_familiarity, q3_fun, q4_understanding, q5_programming_fun,
        q6_purpose, q7_curiosity, q8_utility, q9_effort, q10_self_study, q11_goals,
        q12_communication, q13_reaction, q14_relevance, q15_attendance, q16_participation,
        q17_importance, q18_knowledge, q19_desire_to_improve,
        q20_rank_1, q20_rank_2, q20_rank_3, q20_rank_none,
        q21_rank_1, q21_rank_2, q21_rank_3, q21_rank_none,
        q22_rank_1, q22_rank_2, q22_rank_3, q22_rank_none,
        q23_ai_usability,
        ai_comments
    } = req.body;

    const surveyData = {
        user_id: user.id,
        q1_realization: parseInt(q1_realization) || null,
        q2_familiarity: parseInt(q2_familiarity) || null,
        q3_fun: parseInt(q3_fun) || null,
        q4_understanding: parseInt(q4_understanding) || null,
        q5_programming_fun: parseInt(q5_programming_fun) || null,
        q6_purpose: parseInt(q6_purpose) || null,
        q7_curiosity: parseInt(q7_curiosity) || null,
        q8_utility: parseInt(q8_utility) || null,
        q9_effort: parseInt(q9_effort) || null,
        q10_self_study: parseInt(q10_self_study) || null,
        q11_goals: parseInt(q11_goals) || null,
        q12_communication: parseInt(q12_communication) || null,
        q13_reaction: parseInt(q13_reaction) || null,
        q14_relevance: parseInt(q14_relevance) || null,
        q15_attendance: parseInt(q15_attendance) || null,
        q16_participation: parseInt(q16_participation) || null,
        q17_importance: parseInt(q17_importance) || null,
        q18_knowledge: parseInt(q18_knowledge) || null,
        q19_desire_to_improve: parseInt(q19_desire_to_improve) || null,
        
        q20_rank_1, q20_rank_2, q20_rank_3, q20_rank_none,
        q21_rank_1, q21_rank_2, q21_rank_3, q21_rank_none,
        q22_rank_1, q22_rank_2, q22_rank_3, q22_rank_none,
        
        q23_ai_usability: parseInt(q23_ai_usability) || null,
        ai_comments
    };

    const { error: dbError } = await supabase.from('post_survey_responses').insert([surveyData]);

    if (dbError) {
        console.error('Post-survey submission error:', dbError);
        return res.status(500).json({ error: '事後アンケートの送信に失敗しました。' });
    }

    res.status(200).json({ message: '事後アンケートが正常に送信されました。' });
});

// --- 問題生成API ---
app.post('/api/gemini', async (req, res) => {
    
    const { prompt: userPrompt, model: selectedModel } = req.body;
    if (!userPrompt) {
        return res.status(400).json({ error: 'プロンプトが提供されていません。' });
    }

    try {
        let responseText = "";

        if (selectedModel === 'gpt') {
            // --- ChatGPT (GPT-4o mini) を呼び出す ---
            const chatCompletion = await openai.chat.completions.create({
                messages: [
                    { 
                        role: "system", 
                        content: `あなたは、情報Ⅰの学習支援のためのクイズを生成するAIです。以下の指示に従って、厳密なテキスト形式で問題を作成してください。
- 各問題の始まりは必ず ===QUESTION=== で開始してください。
- 問題文の次は ---ANSWER--- で区切り、正解を1つだけ記述してください。
- 正解の次は ---DISTRACTORS--- で区切り、不正解の選択肢を記述してください。
- **最重要ルール：プログラム問題の不正解の選択肢(DISTRACTORS)は、必ず3つの選択肢を ;;; （セミコロン3つ）で区切って記述してください。各選択肢は1つの答えだけにしてください。**
- 最後に ---EXPLANATION--- で区切り、解説を記述してください。
- 解説は必ず丁寧な日本語で記述してください。`
                    },
                    { 
                        role: "user", 
                        content: userPrompt // index.jsから渡されたプロンプト全体
                    }
                ],
                model: "gpt-4o-mini",
                temperature: 0.3,
            });
            responseText = chatCompletion.choices[0].message.content;

        } else {
            // --- Gemini (FlashまたはPro) を呼び出す ---
            const geminiApiKey = process.env.GEMINI_API_KEY;
            if (!geminiApiKey) {
                return res.status(500).json({ error: 'Gemini APIキーがサーバーに設定されていません。' });
            }

            let modelName = 'models/gemini-flash-latest'; // デフォルトはflash
            if (selectedModel === 'pro') {
                modelName = 'models/gemini-pro-latest';
            }
            
            const url = `https://generativelanguage.googleapis.com/v1beta/${modelName}:generateContent?key=${geminiApiKey}`;
            
            const body = {
                contents: [{ role: "user", parts: [{ text: userPrompt }] }],
                generationConfig: { temperature: 0.3, maxOutputTokens: 4096 }
            };

            const geminiResponse = await fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(body)
            });

            if (!geminiResponse.ok) {
                const errorText = await geminiResponse.text();
                try {
                    const errorJson = JSON.parse(errorText);
                    const message = errorJson.error?.message || 'Gemini APIからエラーが返されました。';
                    throw new Error(message);
                } catch (e) {
                    throw new Error(`Gemini APIから予期しない形式(HTML等)のエラーが返されました。ステータス: ${geminiResponse.status}`);
                }
            }

            const data = await geminiResponse.json();
            responseText = data.candidates?.[0]?.content?.parts?.[0]?.text || "";
        }
        
        res.json(responseText);

    } catch (err) {
        console.error('プロキシサーバーでエラーが発生:', err);
        if (err.code === 'invalid_api_key' || (err.response && err.response.status === 401)) {
             res.status(500).json({ error: 'OpenAI APIキーが無効か、設定されていません。' });
        } else {
             res.status(500).json({ error: err.message || 'プロキシサーバーで不明なエラーが発生しました。' });
        }
    }
});

// サーバーを起動
app.listen(PORT, () => {
    console.log(`プロキシサーバーがポート ${PORT} で起動しました。`);
    console.log(`アクセス: http://localhost:${PORT}`);
});