require('dotenv').config();

const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

const app = express();
const PORT = process.env.PORT || 3000;

// Supabaseクライアントを初期化
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

app.use(cors());
app.use(express.json());

// 静的ファイルの配信設定
app.use(express.static(__dirname));
app.use('/word', express.static(path.join(__dirname, '../word')));
app.use(express.static(path.join(__dirname, '..')));

// --- ユーザー認証API ---

// 新規登録API
app.post('/api/register', async (req, res) => {
    const { email, password, username } = req.body;

    // Supabase Authでユーザーを作成
    const { data, error } = await supabase.auth.signUp({
        email: email,
        password: password,
    });

    if (error) {
        return res.status(400).json({ error: error.message });
    }
    
    // 成功した場合、公開テーブルにもユーザー情報を保存
    if (data.user) {
        const { error: insertError } = await supabase
            .from('users')
            .insert([{ id: data.user.id, username: username }]);

        if (insertError) {
            // ここで失敗した場合、Authユーザーは作成されているが、usersテーブルにはいない状態になる
            // 本番環境では、この場合のロールバック処理などを検討する必要がある
            return res.status(500).json({ error: 'ユーザー情報の保存に失敗しました。' });
        }
    }

    res.status(200).json(data);
});

// ログインAPI
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;
    const { data, error } = await supabase.auth.signInWithPassword({
        email: email,
        password: password,
    });

    if (error) {
        return res.status(400).json({ error: error.message });
    }
    res.status(200).json(data);
});


// --- 問題生成API ---

app.post('/api/gemini', async (req, res) => {
    const geminiApiKey = process.env.GEMINI_API_KEY;
    if (!geminiApiKey) {
        return res.status(500).json({ error: 'Gemini APIキーがサーバーに設定されていません。' });
    }
    
    const userPrompt = req.body.prompt;
    if (!userPrompt) {
        return res.status(400).json({ error: 'プロンプトが提供されていません。' });
    }

    const modelName = 'models/gemini-flash-latest';
    const url = `https://generativelanguage.googleapis.com/v1beta/${modelName}:generateContent?key=${geminiApiKey}`;
    
    const body = {
        contents: [{ role: "user", parts: [{ text: userPrompt }] }],
        generationConfig: { temperature: 0.3, maxOutputTokens: 4096 }
    };

    try {
        const geminiResponse = await fetch(url, {
            method: "POST",
            headers: { 
                "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
        });

        if (!geminiResponse.ok) {
            const errorText = await geminiResponse.text();
            try {
                const errorJson = JSON.parse(errorText);
                const message = errorJson.error?.message || 'Gemini APIからエラーが返されました。';
                throw new Error(message);
            } catch (e) {
                throw new Error(`Gemini APIから予期しない形式(HTML等)のエラーが返されました。ステータス: ${geminiResponse.status}`);
            }
        }

        const data = await geminiResponse.json();
        const responseText = data.candidates?.[0]?.content?.parts?.[0]?.text || "";
        
        res.json(responseText);

    } catch (err) {
        console.error('プロキシサーバーでエラーが発生:', err);
        res.status(500).json({ error: err.message || 'プロキシサーバーで不明なエラーが発生しました。' });
    }
});

// サーバーを起動
app.listen(PORT, () => {
    console.log(`プロキシサーバーがポート ${PORT} で起動しました。`);
    console.log(`アクセス: http://localhost:${PORT}`);
});